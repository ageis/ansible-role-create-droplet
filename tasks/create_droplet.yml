---
# dopy is required for ansible digital_ocean module
- name: Install dopy (required for DigitalOcean API).
  easy_install: name=dopy

- name: Create DigitalOcean droplet.
  digital_ocean:
    command: droplet
    state: present
    name: "{{ droplet_name | mandatory }}"
    unique_name: "{{ droplet_unique_name }}"

    size_id: "{{ droplet_size_id }}"
    region_id: "{{ droplet_region_id }}"
    image_id: "{{ droplet_image_id }}"
    private_networking: "{{ droplet_private_networking }}"

    api_token: "{{ digitalocean_api_token }}"
    # Oddly, the Ansible docs say that `ssh_key_ids` should be
    # a comma-separated list, but passing in a YAML list works.
    #ssh_key_ids: "{{ digitalocean_ssh_key_ids | join(',') }}"
    ssh_key_ids: "{{ digitalocean_ssh_key_ids }}"
    wait: "{{ droplet_wait }}"
    wait_timeout: "{{ droplet_wait_timeout }}"
  register: new_droplet
  tags:
    - digital_ocean
    - provision

- name: Flush old IPs from SSH known_hosts file.
  shell: 'ssh-keygen -f "$HOME/.ssh/known_hosts" -R {{ new_droplet.droplet.ip_address }}'
  when: new_droplet.changed

- name: Add new IP to SSH known_hosts file.
  shell: 'ssh-keyscan -H -T 10 {{ new_droplet.droplet.ip_address }} >> "$HOME/.ssh/known_hosts"'
  when: new_droplet.changed

- name: Add droplet to Ansible inventory.
  add_host:
    name: "{{ droplet_name }}"
    groups: "{{ droplet_groups }}"
  when: droplet_groups is defined and droplet_groups != ''

- name: Warn about adding droplet to Ansible inventory.
  debug:
    msg: >
     Created new host '{{ droplet_name }}'. Rerun this playbook
     so it's included in the inventory. Ansible doesn't reload
     group_vars for hosts that have been added to the inventory
     dynamically, so while {{ droplet_name }} is currently a member
     of `play_hosts`, no group_vars are associated with it yet.
     This may prevent DigitalOcean settings such as username or
     SSH key from being set appropriately. Note that in Ansible 2.0,
     a new meta handler will permit refreshing the inventory via a task.
  when: new_droplet.changed

- name: Set domain name via DigitalOcean if necessary.
  do_domain:
    domain: "{{ domain_name }}"
    ip_address: new_droplet.droplet.ip_address
  when: domain_name is defined and
        domain_name != ''
